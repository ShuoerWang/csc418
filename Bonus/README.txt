This is a path tracer implemented by cuda with diffuse, specular and refractive reflection.

At very beginning, I just wanted to render glass material (like add refraction to A3). However I found that Monte Carlo Path Tracing actually works best for this, and it is a very interesting way of rendering which is very different from our Blinnâ€“Phong reflection model. It's very worth a try so I decide to learn this. I first write a CPU version path tracer. However, since path tracing requires a large amount of samples per pixel and number of reflections (depth) per ray, CPU is not very good at it (too slow and poor quality). Also, I thought about using GPU to render assignments a long time ago, so this is also a great opportunity to learn programming on GPU. I found that cuda c++ is a very nice way to do this and I happen to have a Nvidia GPU. Finally, I decide to realize a path tracer using cuda c++.

The process of my work basically is following. The first thing I actually do is learning the mathematical method of Monte Carlo Path Tracing. I learn this through wiki, textbook and some online notes. It's like a ray tracing we leart plus a Monte Carlo method. Then I make a cpu version of path tracer. After this I started to learn how to run a program on GPU, how to program with cuda to be specific. I leart how to use host (CPU) and device (GPU) in cuda, and make the rendering a multi-thread process by assign rendering of each pixel on its grid-block architecture insteal of loop over them. I tried a single ray-casting on it. After it worked. I begin to implement a path tracer for only the diffuse reflection. Then I add specular and refractive type of reflection. I use the smallpt model for rendering at the beginning. for the image1, it use 65536 samples per pixel and light bounce 16 times, and it finishes rendering in 200 seconds, while this could take 20 hours on a decent CPU. 

What I plan to do in the future is to add what I leant in the course to this path tracer. First is make a glass rabbit, which requires triangle mesh and maybe BVH accelerating. This is quite easy but I don't have time do this now. Then I will probably make it an animation. A pouring water animation might be my ultimate goal.



